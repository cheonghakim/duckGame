import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
import { commonEnv, commonAttr, commonGeo, commonMat } from "./Common";

export default class Main {
  constructor() {
    this.canvas = document.querySelector("#three-canvas");
    this.renderer = new THREE.WebGLRenderer({
      canvas: this.canvas,
      antialias: true,
    });
    this.scene = commonEnv.scene;
    this.camera = new THREE.PerspectiveCamera(
      75,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );

    this.controls = new OrbitControls(this.camera, this.renderer.domElement);

    // 이벤트
    window.addEventListener("resize", this.setSize);
  }
  setInit() {
    //renderer
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    this.renderer.setPixelRatio(window.devicePixelRatio > 1 ? 2 : 1);

    //camera
    this.camera.position.y = 1.5;
    this.camera.position.z = 4;
    this.scene.add(this.camera);

    // Light
    const ambientLight = new THREE.AmbientLight(commonAttr.lightColor, 0.5);
    this.scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(
      commonAttr.lightColor,
      1
    );
    directionalLight.position.x = 1;
    directionalLight.position.z = 2;
    this.scene.add(directionalLight);

    // Controls
    this.controls.enableDamping = true;
  }

  main() {
    // Mesh
    const geometry = new THREE.BoxGeometry(1, 1, 1);
    const material = new THREE.MeshStandardMaterial({
      color: commonAttr.pillarColor,
    });
    const mesh = new THREE.Mesh(geometry, material);
    this.scene.add(mesh);
    const clock = new THREE.Clock();
    draw();

    function draw() {
      this.controls.update();
      this.renderer.render(this.scene, this.camera);
      this.renderer.setAnimationLoop(draw);
    }
  }

  setSize() {
    this.camera.aspect = window.innerWidth / window.innerHeight;
    this.camera.updateProjectionMatrix();
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    this.renderer.render(this.scene, this.camera);
  }
}
